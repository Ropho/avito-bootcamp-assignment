// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/repository.go
//
// Generated by this command:
//
//	mockgen -source=internal/repository/repository.go -destination=internal/repository/mocks/repository.go
//

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"

	flat "github.com/Ropho/avito-bootcamp-assignment/internal/models/flat"
	house "github.com/Ropho/avito-bootcamp-assignment/internal/models/house"
	gomock "go.uber.org/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// FlatCreate mocks base method.
func (m *MockRepository) FlatCreate(ctx context.Context, flat flat.Model) (uint32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlatCreate", ctx, flat)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FlatCreate indicates an expected call of FlatCreate.
func (mr *MockRepositoryMockRecorder) FlatCreate(ctx, flat any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlatCreate", reflect.TypeOf((*MockRepository)(nil).FlatCreate), ctx, flat)
}

// FlatUpdate mocks base method.
func (m *MockRepository) FlatUpdate(ctx context.Context, flatID uint32, flatStatus string) (flat.Model, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlatUpdate", ctx, flatID, flatStatus)
	ret0, _ := ret[0].(flat.Model)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FlatUpdate indicates an expected call of FlatUpdate.
func (mr *MockRepositoryMockRecorder) FlatUpdate(ctx, flatID, flatStatus any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlatUpdate", reflect.TypeOf((*MockRepository)(nil).FlatUpdate), ctx, flatID, flatStatus)
}

// GetHouseFlats mocks base method.
func (m *MockRepository) GetHouseFlats(ctx context.Context, houseID uint32, onlyApproved bool) ([]flat.Model, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHouseFlats", ctx, houseID, onlyApproved)
	ret0, _ := ret[0].([]flat.Model)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHouseFlats indicates an expected call of GetHouseFlats.
func (mr *MockRepositoryMockRecorder) GetHouseFlats(ctx, houseID, onlyApproved any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHouseFlats", reflect.TypeOf((*MockRepository)(nil).GetHouseFlats), ctx, houseID, onlyApproved)
}

// HouseCreate mocks base method.
func (m *MockRepository) HouseCreate(ctx context.Context, house house.Model) (uint32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HouseCreate", ctx, house)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HouseCreate indicates an expected call of HouseCreate.
func (mr *MockRepositoryMockRecorder) HouseCreate(ctx, house any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HouseCreate", reflect.TypeOf((*MockRepository)(nil).HouseCreate), ctx, house)
}
