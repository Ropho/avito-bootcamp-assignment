// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package api

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// Defines values for Status.
const (
	Approved     Status = "approved"
	Created      Status = "created"
	Declined     Status = "declined"
	OnModeration Status = "on moderation"
)

// Defines values for UserType.
const (
	Client    UserType = "client"
	Moderator UserType = "moderator"
)

// Address Адрес дома
type Address = string

// Date Дата + время
type Date = time.Time

// Developer Застройщик
type Developer = string

// Email Email пользователя
type Email = openapi_types.Email

// Flat Квартира
type Flat struct {
	// HouseId Идентификатор дома
	HouseId HouseId `json:"house_id"`

	// Id Идентификатор квартиры
	Id FlatId `json:"id"`

	// Price Цена квартиры в у.е.
	Price Price `json:"price"`

	// Rooms Количество комнат в квартире
	Rooms Rooms `json:"rooms"`

	// Status Статус квартиры
	Status Status `json:"status"`
}

// FlatId Идентификатор квартиры
type FlatId = int

// House Дом
type House struct {
	// Address Адрес дома
	Address Address `json:"address"`

	// CreatedAt Дата + время
	CreatedAt *Date `json:"created_at,omitempty"`

	// Developer Застройщик
	Developer *Developer `json:"developer"`

	// Id Идентификатор дома
	Id HouseId `json:"id"`

	// UpdateAt Дата + время
	UpdateAt *Date `json:"update_at,omitempty"`

	// Year Год постройки дома
	Year Year `json:"year"`
}

// HouseId Идентификатор дома
type HouseId = int

// Password Пароль пользователя
type Password = string

// Price Цена квартиры в у.е.
type Price = int

// Rooms Количество комнат в квартире
type Rooms = int

// Status Статус квартиры
type Status string

// Token Авторизационный токен
type Token = string

// UserId Идентификатор пользователя
type UserId = openapi_types.UUID

// UserType Тип пользователя
type UserType string

// Year Год постройки дома
type Year = int

// GetDummyLoginParams defines parameters for GetDummyLogin.
type GetDummyLoginParams struct {
	UserType UserType `form:"user_type" json:"user_type"`
}

// PostFlatCreateJSONBody defines parameters for PostFlatCreate.
type PostFlatCreateJSONBody struct {
	// HouseId Идентификатор дома
	HouseId HouseId `json:"house_id"`

	// Price Цена квартиры в у.е.
	Price Price `json:"price"`

	// Rooms Количество комнат в квартире
	Rooms *Rooms `json:"rooms,omitempty"`
}

// PostFlatUpdateJSONBody defines parameters for PostFlatUpdate.
type PostFlatUpdateJSONBody struct {
	// Id Идентификатор квартиры
	Id FlatId `json:"id"`

	// Status Статус квартиры
	Status *Status `json:"status,omitempty"`
}

// PostHouseCreateJSONBody defines parameters for PostHouseCreate.
type PostHouseCreateJSONBody struct {
	// Address Адрес дома
	Address Address `json:"address"`

	// Developer Застройщик
	Developer *Developer `json:"developer"`

	// Year Год постройки дома
	Year Year `json:"year"`
}

// PostHouseIdSubscribeJSONBody defines parameters for PostHouseIdSubscribe.
type PostHouseIdSubscribeJSONBody struct {
	// Email Email пользователя
	Email Email `json:"email"`
}

// PostLoginJSONBody defines parameters for PostLogin.
type PostLoginJSONBody struct {
	// Id Идентификатор пользователя
	Id *UserId `json:"id,omitempty"`

	// Password Пароль пользователя
	Password *Password `json:"password,omitempty"`
}

// PostRegisterJSONBody defines parameters for PostRegister.
type PostRegisterJSONBody struct {
	// Email Email пользователя
	Email *Email `json:"email,omitempty"`

	// Password Пароль пользователя
	Password *Password `json:"password,omitempty"`

	// UserType Тип пользователя
	UserType *UserType `json:"user_type,omitempty"`
}

// PostFlatCreateJSONRequestBody defines body for PostFlatCreate for application/json ContentType.
type PostFlatCreateJSONRequestBody PostFlatCreateJSONBody

// PostFlatUpdateJSONRequestBody defines body for PostFlatUpdate for application/json ContentType.
type PostFlatUpdateJSONRequestBody PostFlatUpdateJSONBody

// PostHouseCreateJSONRequestBody defines body for PostHouseCreate for application/json ContentType.
type PostHouseCreateJSONRequestBody PostHouseCreateJSONBody

// PostHouseIdSubscribeJSONRequestBody defines body for PostHouseIdSubscribe for application/json ContentType.
type PostHouseIdSubscribeJSONRequestBody PostHouseIdSubscribeJSONBody

// PostLoginJSONRequestBody defines body for PostLogin for application/json ContentType.
type PostLoginJSONRequestBody PostLoginJSONBody

// PostRegisterJSONRequestBody defines body for PostRegister for application/json ContentType.
type PostRegisterJSONRequestBody PostRegisterJSONBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// ServiceClient which conforms to the OpenAPI3 specification for this service.
type ServiceClient struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*ServiceClient) error

// Creates a new ServiceClient, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*ServiceClient, error) {
	// create a client with sane default values
	client := ServiceClient{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *ServiceClient) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *ServiceClient) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetDummyLogin request
	GetDummyLogin(ctx context.Context, params *GetDummyLoginParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostFlatCreateWithBody request with any body
	PostFlatCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostFlatCreate(ctx context.Context, body PostFlatCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostFlatUpdateWithBody request with any body
	PostFlatUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostFlatUpdate(ctx context.Context, body PostFlatUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostHouseCreateWithBody request with any body
	PostHouseCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostHouseCreate(ctx context.Context, body PostHouseCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetHouseId request
	GetHouseId(ctx context.Context, id HouseId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostHouseIdSubscribeWithBody request with any body
	PostHouseIdSubscribeWithBody(ctx context.Context, id HouseId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostHouseIdSubscribe(ctx context.Context, id HouseId, body PostHouseIdSubscribeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostLoginWithBody request with any body
	PostLoginWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostLogin(ctx context.Context, body PostLoginJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostRegisterWithBody request with any body
	PostRegisterWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostRegister(ctx context.Context, body PostRegisterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *ServiceClient) GetDummyLogin(ctx context.Context, params *GetDummyLoginParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDummyLoginRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *ServiceClient) PostFlatCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostFlatCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *ServiceClient) PostFlatCreate(ctx context.Context, body PostFlatCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostFlatCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *ServiceClient) PostFlatUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostFlatUpdateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *ServiceClient) PostFlatUpdate(ctx context.Context, body PostFlatUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostFlatUpdateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *ServiceClient) PostHouseCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostHouseCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *ServiceClient) PostHouseCreate(ctx context.Context, body PostHouseCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostHouseCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *ServiceClient) GetHouseId(ctx context.Context, id HouseId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetHouseIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *ServiceClient) PostHouseIdSubscribeWithBody(ctx context.Context, id HouseId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostHouseIdSubscribeRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *ServiceClient) PostHouseIdSubscribe(ctx context.Context, id HouseId, body PostHouseIdSubscribeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostHouseIdSubscribeRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *ServiceClient) PostLoginWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostLoginRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *ServiceClient) PostLogin(ctx context.Context, body PostLoginJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostLoginRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *ServiceClient) PostRegisterWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRegisterRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *ServiceClient) PostRegister(ctx context.Context, body PostRegisterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRegisterRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetDummyLoginRequest generates requests for GetDummyLogin
func NewGetDummyLoginRequest(server string, params *GetDummyLoginParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dummyLogin")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "user_type", runtime.ParamLocationQuery, params.UserType); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostFlatCreateRequest calls the generic PostFlatCreate builder with application/json body
func NewPostFlatCreateRequest(server string, body PostFlatCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostFlatCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewPostFlatCreateRequestWithBody generates requests for PostFlatCreate with any type of body
func NewPostFlatCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/flat/create")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostFlatUpdateRequest calls the generic PostFlatUpdate builder with application/json body
func NewPostFlatUpdateRequest(server string, body PostFlatUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostFlatUpdateRequestWithBody(server, "application/json", bodyReader)
}

// NewPostFlatUpdateRequestWithBody generates requests for PostFlatUpdate with any type of body
func NewPostFlatUpdateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/flat/update")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostHouseCreateRequest calls the generic PostHouseCreate builder with application/json body
func NewPostHouseCreateRequest(server string, body PostHouseCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostHouseCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewPostHouseCreateRequestWithBody generates requests for PostHouseCreate with any type of body
func NewPostHouseCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/house/create")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetHouseIdRequest generates requests for GetHouseId
func NewGetHouseIdRequest(server string, id HouseId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/house/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostHouseIdSubscribeRequest calls the generic PostHouseIdSubscribe builder with application/json body
func NewPostHouseIdSubscribeRequest(server string, id HouseId, body PostHouseIdSubscribeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostHouseIdSubscribeRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostHouseIdSubscribeRequestWithBody generates requests for PostHouseIdSubscribe with any type of body
func NewPostHouseIdSubscribeRequestWithBody(server string, id HouseId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/house/%s/subscribe", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostLoginRequest calls the generic PostLogin builder with application/json body
func NewPostLoginRequest(server string, body PostLoginJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostLoginRequestWithBody(server, "application/json", bodyReader)
}

// NewPostLoginRequestWithBody generates requests for PostLogin with any type of body
func NewPostLoginRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/login")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostRegisterRequest calls the generic PostRegister builder with application/json body
func NewPostRegisterRequest(server string, body PostRegisterJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostRegisterRequestWithBody(server, "application/json", bodyReader)
}

// NewPostRegisterRequestWithBody generates requests for PostRegister with any type of body
func NewPostRegisterRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/register")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *ServiceClient) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *ServiceClient) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetDummyLoginWithResponse request
	GetDummyLoginWithResponse(ctx context.Context, params *GetDummyLoginParams, reqEditors ...RequestEditorFn) (*GetDummyLoginResponse, error)

	// PostFlatCreateWithBodyWithResponse request with any body
	PostFlatCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostFlatCreateResponse, error)

	PostFlatCreateWithResponse(ctx context.Context, body PostFlatCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*PostFlatCreateResponse, error)

	// PostFlatUpdateWithBodyWithResponse request with any body
	PostFlatUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostFlatUpdateResponse, error)

	PostFlatUpdateWithResponse(ctx context.Context, body PostFlatUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PostFlatUpdateResponse, error)

	// PostHouseCreateWithBodyWithResponse request with any body
	PostHouseCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostHouseCreateResponse, error)

	PostHouseCreateWithResponse(ctx context.Context, body PostHouseCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*PostHouseCreateResponse, error)

	// GetHouseIdWithResponse request
	GetHouseIdWithResponse(ctx context.Context, id HouseId, reqEditors ...RequestEditorFn) (*GetHouseIdResponse, error)

	// PostHouseIdSubscribeWithBodyWithResponse request with any body
	PostHouseIdSubscribeWithBodyWithResponse(ctx context.Context, id HouseId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostHouseIdSubscribeResponse, error)

	PostHouseIdSubscribeWithResponse(ctx context.Context, id HouseId, body PostHouseIdSubscribeJSONRequestBody, reqEditors ...RequestEditorFn) (*PostHouseIdSubscribeResponse, error)

	// PostLoginWithBodyWithResponse request with any body
	PostLoginWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostLoginResponse, error)

	PostLoginWithResponse(ctx context.Context, body PostLoginJSONRequestBody, reqEditors ...RequestEditorFn) (*PostLoginResponse, error)

	// PostRegisterWithBodyWithResponse request with any body
	PostRegisterWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRegisterResponse, error)

	PostRegisterWithResponse(ctx context.Context, body PostRegisterJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRegisterResponse, error)
}

type GetDummyLoginResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Token Авторизационный токен
		Token *Token `json:"token,omitempty"`
	}
	JSON500 *struct {
		// Code Код ошибки. Предназначен для классификации проблем и более быстрого решения проблем.
		Code *int `json:"code,omitempty"`

		// Message Описание ошибки
		Message string `json:"message"`

		// RequestId Идентификатор запроса. Предназначен для более быстрого поиска проблем.
		RequestId *string `json:"request_id,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetDummyLoginResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDummyLoginResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostFlatCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Flat
	JSON500      *struct {
		// Code Код ошибки. Предназначен для классификации проблем и более быстрого решения проблем.
		Code *int `json:"code,omitempty"`

		// Message Описание ошибки
		Message string `json:"message"`

		// RequestId Идентификатор запроса. Предназначен для более быстрого поиска проблем.
		RequestId *string `json:"request_id,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostFlatCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostFlatCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostFlatUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Flat
	JSON500      *struct {
		// Code Код ошибки. Предназначен для классификации проблем и более быстрого решения проблем.
		Code *int `json:"code,omitempty"`

		// Message Описание ошибки
		Message string `json:"message"`

		// RequestId Идентификатор запроса. Предназначен для более быстрого поиска проблем.
		RequestId *string `json:"request_id,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostFlatUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostFlatUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostHouseCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *House
	JSON500      *struct {
		// Code Код ошибки. Предназначен для классификации проблем и более быстрого решения проблем.
		Code *int `json:"code,omitempty"`

		// Message Описание ошибки
		Message string `json:"message"`

		// RequestId Идентификатор запроса. Предназначен для более быстрого поиска проблем.
		RequestId *string `json:"request_id,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostHouseCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostHouseCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetHouseIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Flats []Flat `json:"flats"`
	}
	JSON500 *struct {
		// Code Код ошибки. Предназначен для классификации проблем и более быстрого решения проблем.
		Code *int `json:"code,omitempty"`

		// Message Описание ошибки
		Message string `json:"message"`

		// RequestId Идентификатор запроса. Предназначен для более быстрого поиска проблем.
		RequestId *string `json:"request_id,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetHouseIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetHouseIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostHouseIdSubscribeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON500      *struct {
		// Code Код ошибки. Предназначен для классификации проблем и более быстрого решения проблем.
		Code *int `json:"code,omitempty"`

		// Message Описание ошибки
		Message string `json:"message"`

		// RequestId Идентификатор запроса. Предназначен для более быстрого поиска проблем.
		RequestId *string `json:"request_id,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostHouseIdSubscribeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostHouseIdSubscribeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostLoginResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Token Авторизационный токен
		Token *Token `json:"token,omitempty"`
	}
	JSON500 *struct {
		// Code Код ошибки. Предназначен для классификации проблем и более быстрого решения проблем.
		Code *int `json:"code,omitempty"`

		// Message Описание ошибки
		Message string `json:"message"`

		// RequestId Идентификатор запроса. Предназначен для более быстрого поиска проблем.
		RequestId *string `json:"request_id,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostLoginResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostLoginResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostRegisterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// UserId Идентификатор пользователя
		UserId *UserId `json:"user_id,omitempty"`
	}
	JSON500 *struct {
		// Code Код ошибки. Предназначен для классификации проблем и более быстрого решения проблем.
		Code *int `json:"code,omitempty"`

		// Message Описание ошибки
		Message string `json:"message"`

		// RequestId Идентификатор запроса. Предназначен для более быстрого поиска проблем.
		RequestId *string `json:"request_id,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostRegisterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostRegisterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetDummyLoginWithResponse request returning *GetDummyLoginResponse
func (c *ClientWithResponses) GetDummyLoginWithResponse(ctx context.Context, params *GetDummyLoginParams, reqEditors ...RequestEditorFn) (*GetDummyLoginResponse, error) {
	rsp, err := c.GetDummyLogin(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDummyLoginResponse(rsp)
}

// PostFlatCreateWithBodyWithResponse request with arbitrary body returning *PostFlatCreateResponse
func (c *ClientWithResponses) PostFlatCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostFlatCreateResponse, error) {
	rsp, err := c.PostFlatCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostFlatCreateResponse(rsp)
}

func (c *ClientWithResponses) PostFlatCreateWithResponse(ctx context.Context, body PostFlatCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*PostFlatCreateResponse, error) {
	rsp, err := c.PostFlatCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostFlatCreateResponse(rsp)
}

// PostFlatUpdateWithBodyWithResponse request with arbitrary body returning *PostFlatUpdateResponse
func (c *ClientWithResponses) PostFlatUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostFlatUpdateResponse, error) {
	rsp, err := c.PostFlatUpdateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostFlatUpdateResponse(rsp)
}

func (c *ClientWithResponses) PostFlatUpdateWithResponse(ctx context.Context, body PostFlatUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PostFlatUpdateResponse, error) {
	rsp, err := c.PostFlatUpdate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostFlatUpdateResponse(rsp)
}

// PostHouseCreateWithBodyWithResponse request with arbitrary body returning *PostHouseCreateResponse
func (c *ClientWithResponses) PostHouseCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostHouseCreateResponse, error) {
	rsp, err := c.PostHouseCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostHouseCreateResponse(rsp)
}

func (c *ClientWithResponses) PostHouseCreateWithResponse(ctx context.Context, body PostHouseCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*PostHouseCreateResponse, error) {
	rsp, err := c.PostHouseCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostHouseCreateResponse(rsp)
}

// GetHouseIdWithResponse request returning *GetHouseIdResponse
func (c *ClientWithResponses) GetHouseIdWithResponse(ctx context.Context, id HouseId, reqEditors ...RequestEditorFn) (*GetHouseIdResponse, error) {
	rsp, err := c.GetHouseId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetHouseIdResponse(rsp)
}

// PostHouseIdSubscribeWithBodyWithResponse request with arbitrary body returning *PostHouseIdSubscribeResponse
func (c *ClientWithResponses) PostHouseIdSubscribeWithBodyWithResponse(ctx context.Context, id HouseId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostHouseIdSubscribeResponse, error) {
	rsp, err := c.PostHouseIdSubscribeWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostHouseIdSubscribeResponse(rsp)
}

func (c *ClientWithResponses) PostHouseIdSubscribeWithResponse(ctx context.Context, id HouseId, body PostHouseIdSubscribeJSONRequestBody, reqEditors ...RequestEditorFn) (*PostHouseIdSubscribeResponse, error) {
	rsp, err := c.PostHouseIdSubscribe(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostHouseIdSubscribeResponse(rsp)
}

// PostLoginWithBodyWithResponse request with arbitrary body returning *PostLoginResponse
func (c *ClientWithResponses) PostLoginWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostLoginResponse, error) {
	rsp, err := c.PostLoginWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostLoginResponse(rsp)
}

func (c *ClientWithResponses) PostLoginWithResponse(ctx context.Context, body PostLoginJSONRequestBody, reqEditors ...RequestEditorFn) (*PostLoginResponse, error) {
	rsp, err := c.PostLogin(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostLoginResponse(rsp)
}

// PostRegisterWithBodyWithResponse request with arbitrary body returning *PostRegisterResponse
func (c *ClientWithResponses) PostRegisterWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRegisterResponse, error) {
	rsp, err := c.PostRegisterWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRegisterResponse(rsp)
}

func (c *ClientWithResponses) PostRegisterWithResponse(ctx context.Context, body PostRegisterJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRegisterResponse, error) {
	rsp, err := c.PostRegister(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRegisterResponse(rsp)
}

// ParseGetDummyLoginResponse parses an HTTP response from a GetDummyLoginWithResponse call
func ParseGetDummyLoginResponse(rsp *http.Response) (*GetDummyLoginResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDummyLoginResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Token Авторизационный токен
			Token *Token `json:"token,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			// Code Код ошибки. Предназначен для классификации проблем и более быстрого решения проблем.
			Code *int `json:"code,omitempty"`

			// Message Описание ошибки
			Message string `json:"message"`

			// RequestId Идентификатор запроса. Предназначен для более быстрого поиска проблем.
			RequestId *string `json:"request_id,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostFlatCreateResponse parses an HTTP response from a PostFlatCreateWithResponse call
func ParsePostFlatCreateResponse(rsp *http.Response) (*PostFlatCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostFlatCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Flat
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			// Code Код ошибки. Предназначен для классификации проблем и более быстрого решения проблем.
			Code *int `json:"code,omitempty"`

			// Message Описание ошибки
			Message string `json:"message"`

			// RequestId Идентификатор запроса. Предназначен для более быстрого поиска проблем.
			RequestId *string `json:"request_id,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostFlatUpdateResponse parses an HTTP response from a PostFlatUpdateWithResponse call
func ParsePostFlatUpdateResponse(rsp *http.Response) (*PostFlatUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostFlatUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Flat
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			// Code Код ошибки. Предназначен для классификации проблем и более быстрого решения проблем.
			Code *int `json:"code,omitempty"`

			// Message Описание ошибки
			Message string `json:"message"`

			// RequestId Идентификатор запроса. Предназначен для более быстрого поиска проблем.
			RequestId *string `json:"request_id,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostHouseCreateResponse parses an HTTP response from a PostHouseCreateWithResponse call
func ParsePostHouseCreateResponse(rsp *http.Response) (*PostHouseCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostHouseCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest House
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			// Code Код ошибки. Предназначен для классификации проблем и более быстрого решения проблем.
			Code *int `json:"code,omitempty"`

			// Message Описание ошибки
			Message string `json:"message"`

			// RequestId Идентификатор запроса. Предназначен для более быстрого поиска проблем.
			RequestId *string `json:"request_id,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetHouseIdResponse parses an HTTP response from a GetHouseIdWithResponse call
func ParseGetHouseIdResponse(rsp *http.Response) (*GetHouseIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetHouseIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Flats []Flat `json:"flats"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			// Code Код ошибки. Предназначен для классификации проблем и более быстрого решения проблем.
			Code *int `json:"code,omitempty"`

			// Message Описание ошибки
			Message string `json:"message"`

			// RequestId Идентификатор запроса. Предназначен для более быстрого поиска проблем.
			RequestId *string `json:"request_id,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostHouseIdSubscribeResponse parses an HTTP response from a PostHouseIdSubscribeWithResponse call
func ParsePostHouseIdSubscribeResponse(rsp *http.Response) (*PostHouseIdSubscribeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostHouseIdSubscribeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			// Code Код ошибки. Предназначен для классификации проблем и более быстрого решения проблем.
			Code *int `json:"code,omitempty"`

			// Message Описание ошибки
			Message string `json:"message"`

			// RequestId Идентификатор запроса. Предназначен для более быстрого поиска проблем.
			RequestId *string `json:"request_id,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostLoginResponse parses an HTTP response from a PostLoginWithResponse call
func ParsePostLoginResponse(rsp *http.Response) (*PostLoginResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostLoginResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Token Авторизационный токен
			Token *Token `json:"token,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			// Code Код ошибки. Предназначен для классификации проблем и более быстрого решения проблем.
			Code *int `json:"code,omitempty"`

			// Message Описание ошибки
			Message string `json:"message"`

			// RequestId Идентификатор запроса. Предназначен для более быстрого поиска проблем.
			RequestId *string `json:"request_id,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostRegisterResponse parses an HTTP response from a PostRegisterWithResponse call
func ParsePostRegisterResponse(rsp *http.Response) (*PostRegisterResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostRegisterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// UserId Идентификатор пользователя
			UserId *UserId `json:"user_id,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			// Code Код ошибки. Предназначен для классификации проблем и более быстрого решения проблем.
			Code *int `json:"code,omitempty"`

			// Message Описание ошибки
			Message string `json:"message"`

			// RequestId Идентификатор запроса. Предназначен для более быстрого поиска проблем.
			RequestId *string `json:"request_id,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /dummyLogin)
	GetDummyLogin(w http.ResponseWriter, r *http.Request, params GetDummyLoginParams)

	// (POST /flat/create)
	PostFlatCreate(w http.ResponseWriter, r *http.Request)

	// (POST /flat/update)
	PostFlatUpdate(w http.ResponseWriter, r *http.Request)

	// (POST /house/create)
	PostHouseCreate(w http.ResponseWriter, r *http.Request)

	// (GET /house/{id})
	GetHouseId(w http.ResponseWriter, r *http.Request, id HouseId)

	// (POST /house/{id}/subscribe)
	PostHouseIdSubscribe(w http.ResponseWriter, r *http.Request, id HouseId)

	// (POST /login)
	PostLogin(w http.ResponseWriter, r *http.Request)

	// (POST /register)
	PostRegister(w http.ResponseWriter, r *http.Request)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// (GET /dummyLogin)
func (_ Unimplemented) GetDummyLogin(w http.ResponseWriter, r *http.Request, params GetDummyLoginParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (POST /flat/create)
func (_ Unimplemented) PostFlatCreate(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (POST /flat/update)
func (_ Unimplemented) PostFlatUpdate(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (POST /house/create)
func (_ Unimplemented) PostHouseCreate(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /house/{id})
func (_ Unimplemented) GetHouseId(w http.ResponseWriter, r *http.Request, id HouseId) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (POST /house/{id}/subscribe)
func (_ Unimplemented) PostHouseIdSubscribe(w http.ResponseWriter, r *http.Request, id HouseId) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (POST /login)
func (_ Unimplemented) PostLogin(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (POST /register)
func (_ Unimplemented) PostRegister(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetDummyLogin operation middleware
func (siw *ServerInterfaceWrapper) GetDummyLogin(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDummyLoginParams

	// ------------- Required query parameter "user_type" -------------

	if paramValue := r.URL.Query().Get("user_type"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "user_type"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "user_type", r.URL.Query(), &params.UserType)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "user_type", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetDummyLogin(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostFlatCreate operation middleware
func (siw *ServerInterfaceWrapper) PostFlatCreate(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostFlatCreate(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostFlatUpdate operation middleware
func (siw *ServerInterfaceWrapper) PostFlatUpdate(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostFlatUpdate(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostHouseCreate operation middleware
func (siw *ServerInterfaceWrapper) PostHouseCreate(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostHouseCreate(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetHouseId operation middleware
func (siw *ServerInterfaceWrapper) GetHouseId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id HouseId

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetHouseId(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostHouseIdSubscribe operation middleware
func (siw *ServerInterfaceWrapper) PostHouseIdSubscribe(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id HouseId

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostHouseIdSubscribe(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostLogin operation middleware
func (siw *ServerInterfaceWrapper) PostLogin(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostLogin(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostRegister operation middleware
func (siw *ServerInterfaceWrapper) PostRegister(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostRegister(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/dummyLogin", wrapper.GetDummyLogin)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/flat/create", wrapper.PostFlatCreate)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/flat/update", wrapper.PostFlatUpdate)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/house/create", wrapper.PostHouseCreate)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/house/{id}", wrapper.GetHouseId)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/house/{id}/subscribe", wrapper.PostHouseIdSubscribe)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/login", wrapper.PostLogin)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/register", wrapper.PostRegister)
	})

	return r
}
